{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios'; // import {data} from '../../data'\n\nconst initialState = {\n  products: [],\n  status: 'idle',\n  error: null\n}; //fetchProducts is a thunk that can dispatch pending, fulfilled or rejected action type.\n//createAsyncThunk accepts three parameters: a string action type value, a payloadCreator \n//callback, and an options object.\n\nexport const fetchProducts = createAsyncThunk('products/fetchProducts', async () => {\n  const response = await axios.get('/api/products');\n  const data = response.data;\n  return data;\n});\nconst productsSlice = createSlice({\n  name: 'products',\n  initialState,\n  reducers: {\n    productLiked: {\n      reducer(state, action) {\n        state.map(product => {\n          if (product.id === action.payload.id) {\n            product.like++;\n          }\n\n          return state;\n        });\n      },\n\n      prepare(product) {\n        return {\n          payload: product\n        };\n      }\n\n    }\n  },\n  extraReducers: {\n    [fetchProducts.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchProducts.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      console.log(action.payload);\n      state.products = state.prorducts.concat(action.payload);\n    },\n    [fetchProducts.failed]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error;\n    }\n  }\n});\nexport const {\n  productLiked\n} = productsSlice.actions;\nexport default productsSlice.reducer;","map":{"version":3,"sources":["W:/tzou/ecommerce-app/frontend/src/features/products/productsSlice.js"],"names":["createSlice","createAsyncThunk","axios","initialState","products","status","error","fetchProducts","response","get","data","productsSlice","name","reducers","productLiked","reducer","state","action","map","product","id","payload","like","prepare","extraReducers","pending","fulfilled","console","log","prorducts","concat","failed","actions"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,gBAArB,QAA4C,kBAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,MAAM,EAAE,MAFS;AAGjBC,EAAAA,KAAK,EAAC;AAHW,CAArB,C,CAMA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAGN,gBAAgB,CAAC,wBAAD,EAA2B,YAAY;AAChF,QAAMO,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAU,eAAV,CAAvB;AACA,QAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAtB;AACA,SAAOA,IAAP;AACH,CAJ4C,CAAtC;AAQP,MAAMC,aAAa,GAAGX,WAAW,CAAC;AAC9BY,EAAAA,IAAI,EAAE,UADwB;AAE9BT,EAAAA,YAF8B;AAG9BU,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,EAAC;AACTC,MAAAA,OAAO,CAACC,KAAD,EAAOC,MAAP,EAAe;AAClBD,QAAAA,KAAK,CAACE,GAAN,CACIC,OAAO,IAAI;AACP,cAAIA,OAAO,CAACC,EAAR,KAAeH,MAAM,CAACI,OAAP,CAAeD,EAAlC,EAAsC;AAClCD,YAAAA,OAAO,CAACG,IAAR;AACH;;AACD,iBAAON,KAAP;AACH,SANL;AAQH,OAVQ;;AAWTO,MAAAA,OAAO,CAACJ,OAAD,EAAU;AACb,eAAO;AACHE,UAAAA,OAAO,EAAEF;AADN,SAAP;AAGH;;AAfQ;AADP,GAHoB;AAsB9BK,EAAAA,aAAa,EAAE;AACX,KAACjB,aAAa,CAACkB,OAAf,GAAyB,CAACT,KAAD,EAAOC,MAAP,KAAkB;AACvCD,MAAAA,KAAK,CAACX,MAAN,GAAe,SAAf;AACH,KAHU;AAIX,KAACE,aAAa,CAACmB,SAAf,GAA2B,CAACV,KAAD,EAAOC,MAAP,KAAkB;AACzCD,MAAAA,KAAK,CAACX,MAAN,GAAe,WAAf;AACAsB,MAAAA,OAAO,CAACC,GAAR,CAAYX,MAAM,CAACI,OAAnB;AACAL,MAAAA,KAAK,CAACZ,QAAN,GAAiBY,KAAK,CAACa,SAAN,CAAgBC,MAAhB,CAAuBb,MAAM,CAACI,OAA9B,CAAjB;AACH,KARU;AASX,KAACd,aAAa,CAACwB,MAAf,GAAyB,CAACf,KAAD,EAAOC,MAAP,KAAkB;AACvCD,MAAAA,KAAK,CAACX,MAAN,GAAe,QAAf;AACAW,MAAAA,KAAK,CAACV,KAAN,GAAcW,MAAM,CAACX,KAArB;AACH;AAZU;AAtBe,CAAD,CAAjC;AAsCA,OAAO,MAAM;AAACQ,EAAAA;AAAD,IAAiBH,aAAa,CAACqB,OAArC;AACP,eAAerB,aAAa,CAACI,OAA7B","sourcesContent":["import {createSlice, createAsyncThunk} from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\n// import {data} from '../../data'\r\n\r\nconst initialState = {\r\n    products: [],\r\n    status: 'idle',\r\n    error:null,\r\n}\r\n\r\n//fetchProducts is a thunk that can dispatch pending, fulfilled or rejected action type.\r\n//createAsyncThunk accepts three parameters: a string action type value, a payloadCreator \r\n//callback, and an options object.\r\nexport const fetchProducts = createAsyncThunk('products/fetchProducts', async () => {\r\n    const response = await axios.get('/api/products')\r\n    const data = response.data\r\n    return data\r\n})\r\n\r\n\r\n\r\nconst productsSlice = createSlice({\r\n    name: 'products',\r\n    initialState,\r\n    reducers: {\r\n        productLiked:{\r\n            reducer(state,action) {\r\n                state.map(\r\n                    product => {\r\n                        if (product.id === action.payload.id) {\r\n                            product.like++\r\n                        }\r\n                        return state\r\n                    }\r\n                )\r\n            },\r\n            prepare(product) {\r\n                return {\r\n                    payload: product\r\n                       }\r\n            }\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [fetchProducts.pending]: (state,action) => {\r\n            state.status = 'loading'\r\n        },\r\n        [fetchProducts.fulfilled]: (state,action) => {\r\n            state.status = 'succeeded'\r\n            console.log(action.payload)\r\n            state.products = state.prorducts.concat(action.payload)\r\n        },\r\n        [fetchProducts.failed] : (state,action) => {\r\n            state.status = 'failed'\r\n            state.error = action.error\r\n        }\r\n    } \r\n})\r\n\r\nexport const {productLiked} = productsSlice.actions\r\nexport default productsSlice.reducer"]},"metadata":{},"sourceType":"module"}