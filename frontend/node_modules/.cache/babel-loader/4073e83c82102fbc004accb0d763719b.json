{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  cart: {},\n  status: 'idle',\n  error: null\n};\nexport const fetchCart = createAsyncThunk('cart/fetchCart', async () => {\n  const response = await axios.get('/api/cart');\n  const data = response.data;\n  return data;\n});\nexport const addProduct = createAsyncThunk('cart/addProduct', async product => {\n  const response = await axios.post('/api/cart', product);\n  return response.data;\n});\nexport const updateProduct = createAsyncThunk('cart/updateProduct', async newCart => {\n  const response = await axios.put(`/api/cart`, newCart);\n  return response.data;\n});\nexport const deleteProduct = createAsyncThunk('cart/deleteProduct', async productIdObj => {\n  const response = await axios.delete(`/api/cart`, {\n    data: productIdObj\n  });\n  return response.data;\n});\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchCart.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchCart.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.cart = action.payload;\n    },\n    [fetchCart.failed]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error;\n    },\n    [addProduct.fulfilled]: (state, action) => {\n      state.cart = action.payload;\n    },\n    [updateProduct.fulfilled]: (state, action) => {\n      state.cart = action.payload.cart;\n    },\n    [deleteProduct.fulfilled]: (state, action) => {\n      state.cart = action.payload.cart;\n    }\n  }\n});\nexport const {\n  productAdded,\n  itemIncremented,\n  itemDecremented,\n  itemRemoved\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["W:/tzou/ecommerce-app/frontend/src/features/cart/cartSlice.js"],"names":["createSlice","createAsyncThunk","axios","initialState","cart","status","error","fetchCart","response","get","data","addProduct","product","post","updateProduct","newCart","put","deleteProduct","productIdObj","delete","cartSlice","name","reducers","extraReducers","pending","state","action","fulfilled","payload","failed","productAdded","itemIncremented","itemDecremented","itemRemoved","actions","reducer"],"mappings":"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","sourcesContent":["import {createSlice, createAsyncThunk} from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\n\r\nconst initialState = {\r\n    cart: {},\r\n    status: 'idle',\r\n    error:null,\r\n}\r\n\r\nexport const fetchCart = createAsyncThunk('cart/fetchCart', async () => {\r\n    const response = await axios.get('/api/cart')\r\n    const data = response.data\r\n    return data\r\n})\r\n\r\nexport const addProduct = createAsyncThunk('cart/addProduct',\r\n     async (product) => {\r\n         const response = await axios.post('/api/cart',product)\r\n         return response.data\r\n     }\r\n)\r\n\r\nexport const updateProduct = createAsyncThunk('cart/updateProduct',\r\n      async (newCart) => {\r\n        const response = await axios.put(`/api/cart`,newCart)\r\n        return response.data\r\n      }  \r\n)\r\n\r\nexport const deleteProduct = createAsyncThunk('cart/deleteProduct',\r\n      async (productIdObj) => {\r\n          const response = await axios.delete(`/api/cart`,{data:productIdObj})\r\n          return response.data\r\n      }\r\n)\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState,\r\n    reducers: {\r\n\r\n    },\r\n    extraReducers: {\r\n        [fetchCart.pending]: (state,action) => {\r\n            state.status = 'loading'\r\n        },\r\n        [fetchCart.fulfilled]: (state,action) => {\r\n            state.status = 'succeeded'\r\n            state.cart = action.payload\r\n        },\r\n        [fetchCart.failed] : (state,action) => {\r\n            state.status = 'failed'\r\n            state.error = action.error\r\n        },\r\n        [addProduct.fulfilled]: (state,action) => {\r\n            state.cart = action.payload\r\n        },\r\n        [updateProduct.fulfilled]: (state,action) => {\r\n            state.cart = action.payload.cart\r\n        },\r\n        [deleteProduct.fulfilled]: (state,action) => {\r\n            state.cart = action.payload.cart\r\n        }\r\n    }\r\n})\r\n\r\nexport const {productAdded,itemIncremented,itemDecremented,itemRemoved} = cartSlice.actions \r\nexport default cartSlice.reducer"]},"metadata":{},"sourceType":"module"}