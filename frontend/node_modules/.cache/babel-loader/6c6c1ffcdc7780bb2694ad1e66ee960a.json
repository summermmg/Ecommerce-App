{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  cart: {},\n  status: 'idle',\n  error: null\n};\nexport const fetchCart = createAsyncThunk('cart/fetchCart', async () => {\n  const response = await axios.get('/api/cart');\n  const data = response.data;\n  return data;\n});\nexport const addProduct = createAsyncThunk('cart/addProduct', async product => {\n  const response = await axios.post('/api/cart', product);\n  return response.data;\n}); //async params will be an obeject \n\nexport const updateProduct = createAsyncThunk('cart/updateProduct', async newCart => {});\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    itemIncremented: {\n      reducer(state, action) {\n        state.products.map(product => {\n          if (product.id === action.payload.id) {\n            product.cartQty++;\n            product.cartTotal += product.price;\n            state.totalQty++;\n            state.totalAmt += product.price;\n          }\n\n          return state;\n        });\n      },\n\n      prepare(cartItem) {\n        return {\n          payload: cartItem\n        };\n      }\n\n    },\n    itemDecremented: {\n      reducer(state, action) {\n        state.products.map(product => {\n          if (product.id === action.payload.id) {\n            product.cartQty--;\n            product.cartTotal -= product.price;\n            state.totalQty--;\n            state.totalAmt -= product.price;\n          }\n\n          return state;\n        });\n      },\n\n      prepare(cartItem) {\n        return {\n          payload: cartItem\n        };\n      }\n\n    },\n    itemRemoved: {\n      reducer(state, action) {\n        state.products = state.products.filter(product => product.id !== action.payload.id);\n        state.totalQty -= action.payload.cartQty;\n        state.totalAmt -= action.payload.cartTotal;\n      },\n\n      prepare(product) {\n        return {\n          payload: product\n        };\n      }\n\n    }\n  },\n  extraReducers: {\n    [fetchCart.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchCart.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.cart = action.payload;\n    },\n    [fetchCart.failed]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error;\n    },\n    [addProduct.fulfilled]: (state, action) => {\n      state.cart = action.payload;\n    }\n  }\n});\nexport const {\n  productAdded,\n  itemIncremented,\n  itemDecremented,\n  itemRemoved\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["W:/tzou/ecommerce-app/frontend/src/features/cart/cartSlice.js"],"names":["createSlice","createAsyncThunk","axios","initialState","cart","status","error","fetchCart","response","get","data","addProduct","product","post","updateProduct","newCart","cartSlice","name","reducers","itemIncremented","reducer","state","action","products","map","id","payload","cartQty","cartTotal","price","totalQty","totalAmt","prepare","cartItem","itemDecremented","itemRemoved","filter","extraReducers","pending","fulfilled","failed","productAdded","actions"],"mappings":"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","sourcesContent":["import {createSlice, createAsyncThunk} from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\n\r\nconst initialState = {\r\n    cart: {},\r\n    status: 'idle',\r\n    error:null,\r\n}\r\n\r\nexport const fetchCart = createAsyncThunk('cart/fetchCart', async () => {\r\n    const response = await axios.get('/api/cart')\r\n    const data = response.data\r\n    return data\r\n})\r\n\r\nexport const addProduct = createAsyncThunk('cart/addProduct',\r\n     async (product) => {\r\n         const response = await axios.post('/api/cart',product)\r\n\r\n         return response.data\r\n     }\r\n)\r\n\r\n//async params will be an obeject \r\nexport const updateProduct = createAsyncThunk('cart/updateProduct',\r\n      async (newCart) => {\r\n\r\n      }  \r\n)\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState,\r\n    reducers: {\r\n        \r\n        itemIncremented: {\r\n            reducer(state,action) {\r\n                state.products.map(product => {\r\n                    if (product.id === action.payload.id) {\r\n                        product.cartQty ++\r\n                        product.cartTotal+=product.price   \r\n                        state.totalQty++\r\n                        state.totalAmt+=product.price\r\n                    }\r\n                    return state\r\n                })\r\n            },\r\n            prepare(cartItem) {\r\n                return {\r\n                    payload: cartItem\r\n                }\r\n            }\r\n        },\r\n        itemDecremented: {\r\n            reducer(state,action) {\r\n                state.products.map(product => {\r\n                    if (product.id === action.payload.id) {\r\n                        product.cartQty --\r\n                        product.cartTotal-=product.price   \r\n                        state.totalQty--\r\n                        state.totalAmt-=product.price\r\n                    }\r\n                    return state\r\n                })\r\n            },\r\n            prepare(cartItem) {\r\n                return {\r\n                    payload: cartItem\r\n                }\r\n            }\r\n        },\r\n        itemRemoved: {\r\n            reducer(state,action) {\r\n                state.products = state.products.filter(product => \r\n                    product.id !== action.payload.id\r\n                )\r\n                state.totalQty-=action.payload.cartQty\r\n                state.totalAmt-=action.payload.cartTotal\r\n            },\r\n            prepare(product) {\r\n                return {\r\n                    payload: product\r\n                }\r\n            }\r\n        } \r\n    },\r\n    extraReducers: {\r\n        [fetchCart.pending]: (state,action) => {\r\n            state.status = 'loading'\r\n        },\r\n        [fetchCart.fulfilled]: (state,action) => {\r\n            state.status = 'succeeded'\r\n            state.cart = action.payload\r\n        },\r\n        [fetchCart.failed] : (state,action) => {\r\n            state.status = 'failed'\r\n            state.error = action.error\r\n        },\r\n        [addProduct.fulfilled]: (state,action) => {\r\n            state.cart = action.payload\r\n        }\r\n    } \r\n})\r\n\r\nexport const {productAdded,itemIncremented,itemDecremented,itemRemoved} = cartSlice.actions \r\nexport default cartSlice.reducer"]},"metadata":{},"sourceType":"module"}