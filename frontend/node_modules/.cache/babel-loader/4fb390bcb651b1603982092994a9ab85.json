{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  cart: {},\n  status: 'idle',\n  error: null\n};\nexport const fetchCart = createAsyncThunk('cart/fetchCart', async () => {\n  const response = await axios.get('/api/cart');\n  const data = response.data;\n  return data;\n});\nexport const addProduct = createAsyncThunk('cart/addProduct', async product => {\n  const response = await axios.post('/api/cart', product);\n  return response.data;\n});\nexport const updateProduct = createAsyncThunk('cart/updateProduct', async newCart => {\n  const response = await axios.put(`/api/cart`, newCart);\n  return response.data;\n});\nexport const deleteProduct = createAsyncThunk('cart/deleteProduct', async productIdObj => {\n  const response = await axio;\n});\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    // itemIncremented: {\n    //     reducer(state,action) {\n    //         state.products.map(product => {\n    //             if (product.id === action.payload.id) {\n    //                 product.cartQty ++\n    //                 product.cartTotal+=product.price   \n    //                 state.totalQty++\n    //                 state.totalAmt+=product.price\n    //             }\n    //             return state\n    //         })\n    //     },\n    //     prepare(cartItem) {\n    //         return {\n    //             payload: cartItem\n    //         }\n    //     }\n    // },\n    itemDecremented: {\n      reducer(state, action) {\n        state.products.map(product => {\n          if (product.id === action.payload.id) {\n            product.cartQty--;\n            product.cartTotal -= product.price;\n            state.totalQty--;\n            state.totalAmt -= product.price;\n          }\n\n          return state;\n        });\n      },\n\n      prepare(cartItem) {\n        return {\n          payload: cartItem\n        };\n      }\n\n    },\n    itemRemoved: {\n      reducer(state, action) {\n        state.products = state.products.filter(product => product.id !== action.payload.id);\n        state.totalQty -= action.payload.cartQty;\n        state.totalAmt -= action.payload.cartTotal;\n      },\n\n      prepare(product) {\n        return {\n          payload: product\n        };\n      }\n\n    }\n  },\n  extraReducers: {\n    [fetchCart.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchCart.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.cart = action.payload;\n    },\n    [fetchCart.failed]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error;\n    },\n    [addProduct.fulfilled]: (state, action) => {\n      state.cart = action.payload;\n    },\n    [updateProduct.fulfilled]: (state, action) => {\n      state.cart = action.payload.cart;\n    }\n  }\n});\nexport const {\n  productAdded,\n  itemIncremented,\n  itemDecremented,\n  itemRemoved\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["W:/tzou/ecommerce-app/frontend/src/features/cart/cartSlice.js"],"names":["createSlice","createAsyncThunk","axios","initialState","cart","status","error","fetchCart","response","get","data","addProduct","product","post","updateProduct","newCart","put","deleteProduct","productIdObj","axio","cartSlice","name","reducers","itemDecremented","reducer","state","action","products","map","id","payload","cartQty","cartTotal","price","totalQty","totalAmt","prepare","cartItem","itemRemoved","filter","extraReducers","pending","fulfilled","failed","productAdded","itemIncremented","actions"],"mappings":"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","sourcesContent":["import {createSlice, createAsyncThunk} from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\n\r\nconst initialState = {\r\n    cart: {},\r\n    status: 'idle',\r\n    error:null,\r\n}\r\n\r\nexport const fetchCart = createAsyncThunk('cart/fetchCart', async () => {\r\n    const response = await axios.get('/api/cart')\r\n    const data = response.data\r\n    return data\r\n})\r\n\r\nexport const addProduct = createAsyncThunk('cart/addProduct',\r\n     async (product) => {\r\n         const response = await axios.post('/api/cart',product)\r\n         return response.data\r\n     }\r\n)\r\n\r\nexport const updateProduct = createAsyncThunk('cart/updateProduct',\r\n      async (newCart) => {\r\n        const response = await axios.put(`/api/cart`,newCart)\r\n        return response.data\r\n      }  \r\n)\r\n\r\nexport const deleteProduct = createAsyncThunk('cart/deleteProduct',\r\n      async (productIdObj) => {\r\n          const response = await axio\r\n      }\r\n)\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState,\r\n    reducers: {\r\n        \r\n        // itemIncremented: {\r\n        //     reducer(state,action) {\r\n        //         state.products.map(product => {\r\n        //             if (product.id === action.payload.id) {\r\n        //                 product.cartQty ++\r\n        //                 product.cartTotal+=product.price   \r\n        //                 state.totalQty++\r\n        //                 state.totalAmt+=product.price\r\n        //             }\r\n        //             return state\r\n        //         })\r\n        //     },\r\n        //     prepare(cartItem) {\r\n        //         return {\r\n        //             payload: cartItem\r\n        //         }\r\n        //     }\r\n        // },\r\n        itemDecremented: {\r\n            reducer(state,action) {\r\n                state.products.map(product => {\r\n                    if (product.id === action.payload.id) {\r\n                        product.cartQty --\r\n                        product.cartTotal-=product.price   \r\n                        state.totalQty--\r\n                        state.totalAmt-=product.price\r\n                    }\r\n                    return state\r\n                })\r\n            },\r\n            prepare(cartItem) {\r\n                return {\r\n                    payload: cartItem\r\n                }\r\n            }\r\n        },\r\n        itemRemoved: {\r\n            reducer(state,action) {\r\n                state.products = state.products.filter(product => \r\n                    product.id !== action.payload.id\r\n                )\r\n                state.totalQty-=action.payload.cartQty\r\n                state.totalAmt-=action.payload.cartTotal\r\n            },\r\n            prepare(product) {\r\n                return {\r\n                    payload: product\r\n                }\r\n            }\r\n        } \r\n    },\r\n    extraReducers: {\r\n        [fetchCart.pending]: (state,action) => {\r\n            state.status = 'loading'\r\n        },\r\n        [fetchCart.fulfilled]: (state,action) => {\r\n            state.status = 'succeeded'\r\n            state.cart = action.payload\r\n        },\r\n        [fetchCart.failed] : (state,action) => {\r\n            state.status = 'failed'\r\n            state.error = action.error\r\n        },\r\n        [addProduct.fulfilled]: (state,action) => {\r\n            state.cart = action.payload\r\n        },\r\n        [updateProduct.fulfilled]: (state,action) => {\r\n            state.cart = action.payload.cart\r\n        },\r\n    }\r\n})\r\n\r\nexport const {productAdded,itemIncremented,itemDecremented,itemRemoved} = cartSlice.actions \r\nexport default cartSlice.reducer"]},"metadata":{},"sourceType":"module"}