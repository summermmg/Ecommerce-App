{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  cart: [],\n  status: 'idle',\n  error: null\n};\nexport const fetchCart = createAsyncThunk('cart/fetchCart', async () => {\n  const response = await axios.get('/api/cart');\n  const data = response.data;\n  return data;\n});\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    productAdded: {\n      reducer(state, action) {\n        state.products.push(action.payload);\n        state.totalQty += action.payload.cartQty;\n        state.totalAmt += action.payload.cartTotal;\n      },\n\n      prepare(product) {\n        return {\n          payload: product\n        };\n      }\n\n    },\n    itemIncremented: {\n      reducer(state, action) {\n        state.products.map(product => {\n          if (product.id === action.payload.id) {\n            product.cartQty++;\n            product.cartTotal += product.price;\n            state.totalQty++;\n            state.totalAmt += product.price;\n          }\n\n          return state;\n        });\n      },\n\n      prepare(cartItem) {\n        return {\n          payload: cartItem\n        };\n      }\n\n    },\n    itemDecremented: {\n      reducer(state, action) {\n        state.products.map(product => {\n          if (product.id === action.payload.id) {\n            product.cartQty--;\n            product.cartTotal -= product.price;\n            state.totalQty--;\n            state.totalAmt -= product.price;\n          }\n\n          return state;\n        });\n      },\n\n      prepare(cartItem) {\n        return {\n          payload: cartItem\n        };\n      }\n\n    },\n    itemRemoved: {\n      reducer(state, action) {\n        state.products = state.products.filter(product => product.id !== action.payload.id);\n        state.totalQty -= action.payload.cartQty;\n        state.totalAmt -= action.payload.cartTotal;\n      },\n\n      prepare(product) {\n        return {\n          payload: product\n        };\n      }\n\n    }\n  },\n  extraReducers: {\n    [fetchCart.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchCart.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.cart = state.cart.concat(action.payload);\n    },\n    [fetchCart.failed]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error;\n    }\n  }\n});\nexport const {\n  productAdded,\n  itemIncremented,\n  itemDecremented,\n  itemRemoved\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["W:/tzou/ecommerce-app/frontend/src/features/cart/cartSlice.js"],"names":["createSlice","createAsyncThunk","axios","initialState","cart","status","error","fetchCart","response","get","data","cartSlice","name","reducers","productAdded","reducer","state","action","products","push","payload","totalQty","cartQty","totalAmt","cartTotal","prepare","product","itemIncremented","map","id","price","cartItem","itemDecremented","itemRemoved","filter","extraReducers","pending","fulfilled","concat","failed","actions"],"mappings":"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","sourcesContent":["import {createSlice, createAsyncThunk} from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\n\r\nconst initialState = {\r\n    cart: [],\r\n    status: 'idle',\r\n    error:null,\r\n}\r\n\r\nexport const fetchCart = createAsyncThunk('cart/fetchCart', async () => {\r\n    const response = await axios.get('/api/cart')\r\n    const data = response.data\r\n    return data\r\n})\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState,\r\n    reducers: {\r\n        productAdded:{\r\n            reducer(state,action) {\r\n                state.products.push(action.payload)\r\n                state.totalQty+=action.payload.cartQty\r\n                state.totalAmt+=action.payload.cartTotal\r\n            },\r\n            prepare(product) {\r\n                return {\r\n                    payload: product\r\n                       }\r\n            }\r\n        },\r\n        itemIncremented: {\r\n            reducer(state,action) {\r\n                state.products.map(product => {\r\n                    if (product.id === action.payload.id) {\r\n                        product.cartQty ++\r\n                        product.cartTotal+=product.price   \r\n                        state.totalQty++\r\n                        state.totalAmt+=product.price\r\n                    }\r\n                    return state\r\n                })\r\n            },\r\n            prepare(cartItem) {\r\n                return {\r\n                    payload: cartItem\r\n                }\r\n            }\r\n        },\r\n        itemDecremented: {\r\n            reducer(state,action) {\r\n                state.products.map(product => {\r\n                    if (product.id === action.payload.id) {\r\n                        product.cartQty --\r\n                        product.cartTotal-=product.price   \r\n                        state.totalQty--\r\n                        state.totalAmt-=product.price\r\n                    }\r\n                    return state\r\n                })\r\n            },\r\n            prepare(cartItem) {\r\n                return {\r\n                    payload: cartItem\r\n                }\r\n            }\r\n        },\r\n        itemRemoved: {\r\n            reducer(state,action) {\r\n                state.products = state.products.filter(product => \r\n                    product.id !== action.payload.id\r\n                )\r\n                state.totalQty-=action.payload.cartQty\r\n                state.totalAmt-=action.payload.cartTotal\r\n            },\r\n            prepare(product) {\r\n                return {\r\n                    payload: product\r\n                }\r\n            }\r\n        } \r\n    },\r\n    extraReducers: {\r\n        [fetchCart.pending]: (state,action) => {\r\n            state.status = 'loading'\r\n        },\r\n        [fetchCart.fulfilled]: (state,action) => {\r\n            state.status = 'succeeded'\r\n            state.cart = state.cart.concat(action.payload)\r\n        },\r\n        [fetchCart.failed] : (state,action) => {\r\n            state.status = 'failed'\r\n            state.error = action.error\r\n        }\r\n    } \r\n})\r\n\r\nexport const {productAdded,itemIncremented,itemDecremented,itemRemoved} = cartSlice.actions \r\nexport default cartSlice.reducer"]},"metadata":{},"sourceType":"module"}